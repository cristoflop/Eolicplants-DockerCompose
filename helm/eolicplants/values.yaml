# Default values for eolicplants.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

images:
  - repository: cloudappsteam/weatherservice
    tag: "1.0"
    name: weatherservice
    pullPolicy: IfNotPresent
    env:
      GRPC_HOST: 0.0.0.0
      GRPC_PORT: 8080

  - repository: cloudappsteam/planner
    tag: "1.0"
    pullPolicy: IfNotPresent
    name: planner
    env:
      AMQP_USER: guest
      AMQP_PASS: guest
      AMQP_HOST: broker
      AMQP_PORT: 5672
      GRPC_HOST: weather
      GRPC_PORT: 8080
      TOPO_PORT: 8080
      TOPO_HOST: topo

  - repository: cloudappsteam/server
    tag: "1.0"
    name: server
    useIngress: true
    pullPolicy: IfNotPresent
    env:
      AMQP_USER: guest
      AMQP_PASS: guest
      AMQP_HOST: broker
      AMQP_PORT: 5672
      DB_NAME: eoloplants
      DB_USER: root
      DB_PORT: 3306
      DB_PASS: root
      DB_HOST: sqldb

  - repository: cloudappsteam/toposervice
    name: toposervice
    tag: "1.0"
    pullPolicy: IfNotPresent
    useIngress: true
    env:
      SERVER_PORT: 8080
      NOSQL_DB_HOST: nosqldb
      NOSQL_DB_PORT: 27017
      NOSQL_DB_NAME: topodb
      NOSQL_DB_USER: root
      NOSQL_DB_PASS: root

  - name: broker
    port: 5672
    repository: rabbitmq
    tag: "3.8.14-alpine"
    env:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumeName: "broker-pvc-sc"

  - name: nosqldb
    port: 27017
    repository: mongo
    tag: "4.2.12-bionic"
    env:
      MONGO_INITDB_DATABASE: topodb
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    volumes:
      - path: /db/nosql
        name: "nosql-pvc-sc"

  - name: sqldb
    port: 3306
    repository: mysql
    tag: "8.0.23"
    env:
      MYSQL_DATABASE: eoloplants
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - path: /db/sqldb
        name: "sqldb-pvc-sc"

volumes:
  enabled: true
  items:
    broker:
      accessModes:
        - ReadWriteOnce
      size: 1Gi
    nosqldb:
      accessModes:
        - ReadWriteOnce
      size: 1Gi
    sqldb:
      accessModes:
        - ReadWriteOnce
      size: 1Gi

networkPolicies:
  enabled: true
  items:
    broker:
      app: broker
      allowTraffic:
        from:
          - planner
          - server
      ports:
        - 5672
    nosqldb:
      app: nosqldb
      allowTraffic:
        from:
          - topo
      ports:
        - 27017
    sqldb:
      app: sqldb
      allowTraffic:
        from:
          - server
      ports:
        - 3306
    topo:
      app: topo
      allowTraffic:
        from:
          - planner
      ports:
        - 8080
    planner:
      app: planner
      allowTraffic:
        to:
          - broker
          - weather
          - topo
      ports:
        - 8080
    weather:
      app: weather
      allowTraffic:
        from:
          - planner
      ports:
        - 8080
    deny:
      allowTraffic:
      policyTypes:
        - Ingress
        - Egress
    ingress:
      allowTraffic:

imagePullSecrets: [ ]
nameOverride: ""
fullnameOverride: ""
createPersistenceVolumes: false

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: { }
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: { }

podSecurityContext: { }
# fsGroup: 2000

securityContext: { }
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
# runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    dev.okteto.com/generate-host: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /(.*)
          backend:
            serviceName: server
            servicePort: 8080
        - path: /toposervice/(.*)
          backend:
            serviceName: topo
            servicePort: 8080
  tls: [ ]
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: { }
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
#   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: { }

tolerations: [ ]

affinity: { }
